# -*- coding: utf-8 -*-
"""
Created on Sat Feb 16 22:18:08 2019

@author: PaulJ
"""

import unittest
from contextlib import suppress


def decodeMorse(morse_code):
    return ' '.join(
        [''.join([MORSE_CODE[letter] for letter in code_word.split()])
         for code_word in morse_code.strip().split('   ')])


def decodeBits(bits):
    clean_bits = bits.strip('0')
    clean_bits_temp = clean_bits[:]
    dot_len = 1e6
    while clean_bits_temp:
        try:
            next_sect_begin = (
                clean_bits_temp.index(str(int(not int(clean_bits_temp[0])))))
        except ValueError:
            next_sect_begin = len(clean_bits_temp)
        dot_len = min(dot_len, next_sect_begin)
        clean_bits_temp = clean_bits_temp[next_sect_begin:]

    bits_to_morse = {'1' * dot_len: '.',
                     '1' * (dot_len * 3): '-',
                     '0' * dot_len: '',
                     '0' * (dot_len * 3): ' ',
                     '0' * (dot_len * 7): '   '
                     }

    morse_code = ''
    while clean_bits:
        try:
            next_sect_begin = (
                clean_bits.index(str(int(not int(clean_bits[0])))))
            char = clean_bits[:next_sect_begin]
        except ValueError:
            next_sect_begin = len(clean_bits)
            char = clean_bits
        with suppress(KeyError):
            morse_code += bits_to_morse[char]
        clean_bits = clean_bits[next_sect_begin:]
    return morse_code


MORSE_CODE = {'.-': 'A',
              '-...': 'B',
              '-.-.': 'C',
              '-..': 'D',
              '.': 'E',
              '..-.': 'F',
              '--.': 'G',
              '....': 'H',
              '..': 'I',
              '.---': 'J',
              '-.-': 'K',
              '.-..': 'L',
              '--': 'M',
              '-.': 'N',
              '---': 'O',
              '.--.': 'P',
              '--.-': 'Q',
              '.-.': 'R',
              '...': 'S',
              '-': 'T',
              '..-': 'U',
              '...-': 'V',
              '.--': 'W',
              '-..-': 'X',
              '-.--': 'Y',
              '--..': 'Z',
              '-----': '0',
              '.----': '1',
              '..---': '2',
              '...--': '3',
              '....-': '4',
              '.....': '5',
              '-....': '6',
              '--...': '7',
              '---..': '8',
              '----.': '9',
              '.-.-.-': '.',
              '--..--': ',',
              '..--..': '?',
              '.----.': "'",
              '-.-.--': '!',
              '-..-.': '/',
              '-.--.': '(',
              '-.--.-': ')',
              '.-...': '&',
              '---...': ':',
              '-.-.-.': ';',
              '-...-': '=',
              '.-.-.': '+',
              '-....-': '-',
              '..--.-': '_',
              '.-..-.': '"',
              '...-..-': '$',
              '.--.-.': '@',
              '...-.-': 'End of Work',
              '........': 'Error',
              # '-.-': 'Invitation to Transmit',
              '-.-.-': 'Starting Signal',
              # '.-.-.': 'New Page Signal',
              '...-.': 'Understood',
              # '.-...': 'Wait',
              '...---...': 'SOS'
              }


class InterpreterTestMethods(unittest.TestCase):

    tests = {'1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011': 'HEY JUDE',
             '1': 'E',
             '101': 'I',
             '10001': 'EE',
             '10111': 'A',
             '1110111': 'M',
             '111': 'E',
             '1111111': 'E',
             '110011': 'I',
             '111000111': 'I',
             '111110000011111': 'I',
             '111000000000111': 'EE',
             '11111100111111': 'M',
             '111000111000111': 'S',
             '01110': 'E',
             '000000011100000': 'E',
             '00011100010101010001000000011101110101110001010111000101000111010111010001110101110000000111010101000101110100011101110111000101110111000111010000000101011101000111011101110001110101011100000001011101110111000101011100011101110001011101110100010101000000011101110111000101010111000100010111010000000111000101010100010000000101110101000101110001110111010100011101011101110000000111010100011101110111000111011101000101110101110101110': 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.',

             }

    def test_basic(self):
        for code in self.tests:
            answer = self.tests[code]
            result = decodeMorse(decodeBits(code))
            if result != answer:
                print('code:', code, ', answer:', answer, ', result:', result)
            self.assertEqual(result, answer)


if __name__ == '__main__':
    unittest.main()
